def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var42 = func2(arg2, arg1)
    var46 = func10(arg1, var42)
    var47 = var46 ^ var46 ^ (arg2 | arg1 | -1032178119) + -14237655
    if var46 < var42:
        var48 = (2060595518 - arg2) - var42 ^ var47 + var47
    else:
        var48 = (var47 - (-1473316367 - var42)) | (((163 + arg1) & arg1 | arg1 ^ var42 & (var47 | (((arg1 ^ 200) - arg2) ^ (var46 | -57) | var46) & var47 ^ 2081877785) | arg2 ^ -894) & -820 + var46 + arg1)
    if arg2 < var46:
        var49 = ((126 & ((var47 | (var42 - 434)) ^ (arg2 | (var42 & arg2) + (var47 | -1286607014 + ((var46 - arg2) + 1679114744))))) - (var46 | var47)) | arg1 & var47 ^ -1009840266
    else:
        var49 = -1084995406 & (arg2 | (var42 + arg1 - (-428331564 & 895677556)))
    var50 = var46 ^ var46 - (var42 & 904)
    result = var47 - 1856755827
    return result
def func2(arg3, arg4):
    var5 = func5()
    var33 = var8(var5, arg3)
    var38 = func9(arg3, var33)
    var39 = arg4 + arg3
    var40 = arg3 | var38
    var41 = var5 | var40 + (arg3 & ((var33 & var38 + var38) + (arg3 & var5))) + var39
    result = (var5 & arg4) & var40 - (847 & var39 ^ var38)
    return result
def func9(arg34, arg35):
    var36 = 0
    for var37 in range(6):
        var36 += (arg34 & arg34) | -10
    return var36
def func8(arg9, arg10):
    var11 = (arg9 & 1890419031 & 817) & arg10
    var12 = arg9 & arg10 + (arg9 ^ arg9)
    var13 = arg9 | arg9 | arg10 & var11
    var14 = var11 - arg10 + (var11 & arg9)
    var15 = var14 & var11 & 278 & arg10
    var16 = arg10 & arg10
    var17 = arg10 ^ 2125222334 + (var16 ^ 919)
    var18 = (var13 - var16 ^ var11) - 244
    var19 = arg10 - ((arg10 | var16) ^ 1652279393)
    var20 = var12 + 1953897260
    var21 = var14 & ((var17 - var16) ^ var19)
    var22 = (var17 - var18 ^ var14) & var13
    var23 = var11 ^ var16
    var24 = -1370578390 & var17 - var18 | var11
    var25 = var16 + var23 & var24
    var26 = (var15 - (var24 ^ var17)) ^ var22
    var27 = (var20 ^ 741 ^ var14) & var17
    var28 = var11 | var23 + var15 | var11
    var29 = var23 + (var26 | var15 & var13)
    var30 = var28 & var27
    var31 = arg9 - var29 + var13 | var11
    var32 = var12 ^ (var11 | var27) ^ var25
    result = var15 | var31
    return result
def func7():
    closure = [-5]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(xrange(25))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 0
def func10(arg43, arg44):
    def func11(acc, rest):
        var45 = -10 - (7 + 1)
        if acc == 0:
            return var45
        else:
            result = func11(acc - 1, var45)
            return result
    result = func11(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
